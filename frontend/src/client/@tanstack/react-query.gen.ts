// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-axios";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import {
  client,
  getRomsRomsGet,
  getRoomsRoomsGet,
  createRoomRoomsPost,
} from "../services.gen";
import type {
  CreateRoomRoomsPostData,
  CreateRoomRoomsPostError,
  CreateRoomRoomsPostResponse,
} from "../types.gen";
import type { AxiosError } from "axios";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getRomsRomsGetQueryKey = (options?: Options) => [
  createQueryKey("getRomsRomsGet", options),
];

export const getRomsRomsGetOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRomsRomsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getRomsRomsGetQueryKey(options),
  });
};

export const getRoomsRoomsGetQueryKey = (options?: Options) => [
  createQueryKey("getRoomsRoomsGet", options),
];

export const getRoomsRoomsGetOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRoomsRoomsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getRoomsRoomsGetQueryKey(options),
  });
};

export const createRoomRoomsPostQueryKey = (
  options: Options<CreateRoomRoomsPostData>,
) => [createQueryKey("createRoomRoomsPost", options)];

export const createRoomRoomsPostOptions = (
  options: Options<CreateRoomRoomsPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createRoomRoomsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createRoomRoomsPostQueryKey(options),
  });
};

export const createRoomRoomsPostMutation = (
  options?: Partial<Options<CreateRoomRoomsPostData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateRoomRoomsPostResponse,
    AxiosError<CreateRoomRoomsPostError>,
    Options<CreateRoomRoomsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createRoomRoomsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
