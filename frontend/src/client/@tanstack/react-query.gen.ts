// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-axios";
import {
  queryOptions,
  infiniteQueryOptions,
  type InfiniteData,
  type UseMutationOptions,
} from "@tanstack/react-query";
import type {
  GetAllItemsGetData,
  GetAllItemsGetError,
  GetAllItemsGetResponse,
  InsertItemsPostData,
  InsertItemsPostError,
  InsertItemsPostResponse,
  GetOneItemsItemIdGetData,
  UpdateItemsItemIdPutData,
  UpdateItemsItemIdPutError,
  UpdateItemsItemIdPutResponse,
  DeleteItemsItemIdDeleteData,
  DeleteItemsItemIdDeleteError,
  DeleteItemsItemIdDeleteResponse,
} from "../types.gen";
import type { AxiosError } from "axios";
import {
  client,
  getAllItemsGet,
  insertItemsPost,
  getOneItemsItemIdGet,
  updateItemsItemIdPut,
  deleteItemsItemIdDelete,
} from "../services.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getAllItemsGetQueryKey = (
  options?: Options<GetAllItemsGetData>,
) => [createQueryKey("getAllItemsGet", options)];

export const getAllItemsGetOptions = (
  options?: Options<GetAllItemsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllItemsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAllItemsGetQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...queryKey[0].path,
      ...page.path,
    };
  }
  if (page.query) {
    params.query = {
      ...queryKey[0].query,
      ...page.query,
    };
  }
  return params as unknown as typeof page;
};

export const getAllItemsGetInfiniteQueryKey = (
  options?: Options<GetAllItemsGetData>,
): QueryKey<Options<GetAllItemsGetData>> => [
  createQueryKey("getAllItemsGet", options, true),
];

export const getAllItemsGetInfiniteOptions = (
  options?: Options<GetAllItemsGetData>,
) => {
  return infiniteQueryOptions<
    GetAllItemsGetResponse,
    AxiosError<GetAllItemsGetError>,
    InfiniteData<GetAllItemsGetResponse>,
    QueryKey<Options<GetAllItemsGetData>>,
    | number
    | Pick<
        QueryKey<Options<GetAllItemsGetData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetAllItemsGetData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getAllItemsGet({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getAllItemsGetInfiniteQueryKey(options),
    },
  );
};

export const insertItemsPostQueryKey = (
  options: Options<InsertItemsPostData>,
) => [createQueryKey("insertItemsPost", options)];

export const insertItemsPostOptions = (
  options: Options<InsertItemsPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await insertItemsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: insertItemsPostQueryKey(options),
  });
};

export const insertItemsPostMutation = (
  options?: Partial<Options<InsertItemsPostData>>,
) => {
  const mutationOptions: UseMutationOptions<
    InsertItemsPostResponse,
    AxiosError<InsertItemsPostError>,
    Options<InsertItemsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await insertItemsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getOneItemsItemIdGetQueryKey = (
  options: Options<GetOneItemsItemIdGetData>,
) => [createQueryKey("getOneItemsItemIdGet", options)];

export const getOneItemsItemIdGetOptions = (
  options: Options<GetOneItemsItemIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOneItemsItemIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getOneItemsItemIdGetQueryKey(options),
  });
};

export const updateItemsItemIdPutMutation = (
  options?: Partial<Options<UpdateItemsItemIdPutData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateItemsItemIdPutResponse,
    AxiosError<UpdateItemsItemIdPutError>,
    Options<UpdateItemsItemIdPutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateItemsItemIdPut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteItemsItemIdDeleteMutation = (
  options?: Partial<Options<DeleteItemsItemIdDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteItemsItemIdDeleteResponse,
    AxiosError<DeleteItemsItemIdDeleteError>,
    Options<DeleteItemsItemIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteItemsItemIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
