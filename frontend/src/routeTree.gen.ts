/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ItemsImport } from './routes/items'
import { Route as IndexImport } from './routes/index'
import { Route as ItemsIndexImport } from './routes/items.index'
import { Route as ItemsItemIdImport } from './routes/items.$itemId'

// Create/Update Routes

const ItemsRoute = ItemsImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ItemsIndexRoute = ItemsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ItemsRoute,
} as any)

const ItemsItemIdRoute = ItemsItemIdImport.update({
  id: '/$itemId',
  path: '/$itemId',
  getParentRoute: () => ItemsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/items': {
      id: '/items'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsImport
      parentRoute: typeof rootRoute
    }
    '/items/$itemId': {
      id: '/items/$itemId'
      path: '/$itemId'
      fullPath: '/items/$itemId'
      preLoaderRoute: typeof ItemsItemIdImport
      parentRoute: typeof ItemsImport
    }
    '/items/': {
      id: '/items/'
      path: '/'
      fullPath: '/items/'
      preLoaderRoute: typeof ItemsIndexImport
      parentRoute: typeof ItemsImport
    }
  }
}

// Create and export the route tree

interface ItemsRouteChildren {
  ItemsItemIdRoute: typeof ItemsItemIdRoute
  ItemsIndexRoute: typeof ItemsIndexRoute
}

const ItemsRouteChildren: ItemsRouteChildren = {
  ItemsItemIdRoute: ItemsItemIdRoute,
  ItemsIndexRoute: ItemsIndexRoute,
}

const ItemsRouteWithChildren = ItemsRoute._addFileChildren(ItemsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/items': typeof ItemsRouteWithChildren
  '/items/$itemId': typeof ItemsItemIdRoute
  '/items/': typeof ItemsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/items/$itemId': typeof ItemsItemIdRoute
  '/items': typeof ItemsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/items': typeof ItemsRouteWithChildren
  '/items/$itemId': typeof ItemsItemIdRoute
  '/items/': typeof ItemsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/items' | '/items/$itemId' | '/items/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/items/$itemId' | '/items'
  id: '__root__' | '/' | '/items' | '/items/$itemId' | '/items/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ItemsRoute: typeof ItemsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ItemsRoute: ItemsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/items"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/items": {
      "filePath": "items.tsx",
      "children": [
        "/items/$itemId",
        "/items/"
      ]
    },
    "/items/$itemId": {
      "filePath": "items.$itemId.tsx",
      "parent": "/items"
    },
    "/items/": {
      "filePath": "items.index.tsx",
      "parent": "/items"
    }
  }
}
ROUTE_MANIFEST_END */
